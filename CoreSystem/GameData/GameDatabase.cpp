#include "StdAfx.h"
#include "GameDatabase.h"

namespace FDO
{
	
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	IGameData::IGameData()
	{

	}
	//////////////////////////////////////////////////////////////////////////
	IGameData::~IGameData()
	{

	}
	//////////////////////////////////////////////////////////////////////////
	IGameData::ValueMap IGameData::value_map =
	{
		0,
		&IGameData::value_entrys[0]
	};
	////////////////////////////////////////////////////////////////////////////////////////////////////
	IGameData::ValueEntry IGameData::value_entrys[] =
	{
		{ 0,0,0,0,0 }
	};
	//////////////////////////////////////////////////////////////////////////
// 	bool IGameData::Get(uint nCmd,void* pData) const 
// 	{
// 		const ValueMap* pMap = GetValueMap() ;
// 		for (; pMap != 0 ; pMap = pMap->pBase)
// 		{
// 			int idx = 0;
// 			while (pMap->pEntries[idx].pfnAssignValue != 0)
// 			{
// 				if(pMap->pEntries[idx].nCmd != nCmd)
// 					continue;
// 				return (this->*pMap->pEntries[idx].pfnAssignValue)(pData,false);
// 			}			
// 		}
// 		return false;
// 	}
// 	//////////////////////////////////////////////////////////////////////////
// 	bool IGameData::Set(uint nCmd,void* pData)  
// 	{
// 		const ValueMap* pMap = GetValueMap() ;
// 		for (; pMap != 0 ; pMap = pMap->pBase)
// 		{
// 			int idx = 0;
// 			while (pMap->pEntries[idx].pfnAssignValue != 0)
// 			{
// 				if(pMap->pEntries[idx].nCmd != nCmd)
// 					continue;
// 				return (this->*pMap->pEntries[idx].pfnAssignValue)(pData,true);
// 			}			
// 		}
// 		return false;
// 	}
	//////////////////////////////////////////////////////////////////////////
	const IGameData::ValueMap* IGameData::GetValueMap() const
	{
		return &IGameData::value_map;
	}
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	bool GameDataManager::Register(const char8* name,IGameDataPtr pgd)
	{
		if(Query(name) == 0)
		{
			insert( make_pair(name,pgd));
			pgd->Start();
			return true;
		}
		return false;
	}
	//////////////////////////////////////////////////////////////////////////
	void GameDataManager::Unregister(const char8* name)
	{		
		GameDataMap::iterator it = find(name);
		if(it != GameDataMap::end())
			it->second->ShutDown();
		erase(name);
	}
	//////////////////////////////////////////////////////////////////////////
	IGameDataPtr GameDataManager::Query(const char8* name)
	{
		GameDataMap::iterator it = find(name);
		if(it != end())
			return it->second;
		return 0;
	}
	////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	IGameDataPtr fnQueryGameData(const char8* name)
	{
		if(GameDataManager::GetSingletonPtr()) 
			return GameDataManager::GetSingletonPtr()->Query(name);
		return 0;
	}
};

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

namespace ResoueceSystem
{
	bool HANDLEIMPL::fnValid(HANDLEIMPL* pHnd)
	{
		if(pHnd)
			return pHnd->mnKey != 0;
		return false;
	}
	//////////////////////////////////////////////////////////////////////////
	bool fnValid	(HANDLE hnd)
	{
		if(hnd.get())
		{
			return HANDLEIMPL::fnValid(hnd.get());
		}
		return false;
	}
	//////////////////////////////////////////////////////////////////////////
	HANDLEIMPL::HANDLEIMPL(void* pObj,IResourceManagerPtr pOwner) :mnKey(0)
	{

		static uint64 gkeycount = 0;
		mnKey = ++gkeycount;
/*
#ifdef _DEBUG
		static uint64 gkeycount = 0;
		mnKey = ++gkeycount;
#else
		LARGE_INTEGER nLintTC;
		QueryPerformanceCounter(&nLintTC);

		mnKey = nLintTC.QuadPart;
#endif
*/		
	}
	//////////////////////////////////////////////////////////////////////////
	HANDLEIMPL::HANDLEIMPL() :mnKey(0)
	{

	}
	//////////////////////////////////////////////////////////////////////////
	HANDLEIMPL::~HANDLEIMPL()
	{

	}
	//////////////////////////////////////////////////////////////////////////
	
		
}
