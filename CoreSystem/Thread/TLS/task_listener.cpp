#include "stdafx.h"
#include "task_listener.h"

namespace NSTask
{
	TaskInquisitor::TaskInquisitor()
	{

	}
	//////////////////////////////////////////////////////////////////////////
	TaskInquisitor::~TaskInquisitor()
	{


	}
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	TaskListener::TaskListener()
	{

	}
	//////////////////////////////////////////////////////////////////////////
	TaskListener::~TaskListener()
	{

	}
	//////////////////////////////////////////////////////////////////////////
	void TaskListener::SetRequest(TaskID nId,TaskInquisitor* pInquisitor)
	{
		mInquisitors[nId] = pInquisitor;
	}
	//////////////////////////////////////////////////////////////////////////
	void TaskListener::operator()(int nThreadId,TaskID nTaskId)
	{
		std::map<TaskID,TaskInquisitor*>::iterator it = mInquisitors.find(nTaskId);

		if(it != mInquisitors.end())
		{			
			if(it->second)
			{
				it->second->TaskFinish(nThreadId,nTaskId);
			}	
			mInquisitors.erase(it);
		}
	}
};